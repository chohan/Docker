# pre-requisites. First download following in the folder where this docker file is
#	wget https://download.oracle.com/java/17/archive/jdk-17.0.1_linux-x64_bin.tar.gz
#	wget https://download.oracle.com/otn_software/linux/instantclient/214000/instantclient-basiclite-linux.x64-21.4.0.0.0dbru.zip
#	wget https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-x64.tar.xz
#	download SQLcl
#	update .bashrc etc to github
#	update xxx_VERSION

FROM ubuntu:22.04
MAINTAINER Salah Chohan
LABEL version="1.0" Location="Canada/Toronto" type="ubuntu_dev"
ENV DEBIAN_FRONTEND=noninteractive

RUN	echo -e "\n\n\n### Basic Software ####\n" && \
	apt update -y && \
	apt install -y \
	git wget curl apt-utils zip unzip build-essential cmake pkg-config ca-certificates autotools-dev g++ gdb

RUN	echo -e "\n\n\n### SSH/OpenSSL ####\n" && \
	apt install -y openssh* sshpass sshfs openssl stunnel && \
	sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
	echo "service ssh restart" >> /start.sh

RUN	echo -e "\n\n\n### SSH Keys ####\n"
COPY ubuntu_dev/id_rsa.pub /root/.ssh/authorized_keys
COPY ubuntu_dev/id_rsa.pub /root/.ssh/.
COPY ubuntu_dev/id_rsa.ppk /root/.ssh/.
COPY ubuntu_dev/id_rsa /root/.ssh/.
RUN	echo 'root:toor' | chpasswd && \
	chmod 700 /root/.ssh/*

#RUN	echo -e "\n\n\n### Boost ####\n" && \
#	apt install -y libboost-all-dev

RUN	echo -e "\n\n\n### GO Lang ####\n" && \
	apt install -y golang

RUN	echo -e "\n\n\n### Java/Maven ####\n"
ENV JDK_VERSION=20.0.1
COPY jdk-${JDK_VERSION}_linux-x64_bin.tar.gz /tmp
RUN apt install -y maven && \
	cd /tmp && tar -xvf jdk-${JDK_VERSION}_linux-x64_bin.tar.gz && \
	mkdir -p /usr/lib/jvm/jdk-${JDK_VERSION}/ && \
	mv /tmp/jdk-${JDK_VERSION}/* /usr/lib/jvm/jdk-${JDK_VERSION}/ && \
	update-alternatives --install "/usr/bin/java" "java" "/usr/lib/jvm/jdk-${JDK_VERSION}/bin/java" 1010 && \
	update-alternatives --install "/usr/bin/javac" "javac" "/usr/lib/jvm/jdk-${JDK_VERSION}/bin/javac" 1010 && \
	echo "export JAVA_HOME=/usr/lib/jvm/jdk-${JDK_VERSION}" >> /etc/environment
ENV PATH=$PATH:/usr/lib/jvm/jdk-${JDK_VERSION}/bin
RUN apt autoclean && apt autoremove && apt clean

RUN	echo -e "\n\n\n### Python ####\n" && \	
	apt update -y && \
	apt install -y python3 python3-pip && \
	python3 -m pip install --user numpy pandas && \
	pip3 install websockets && \
	pip3 install redis cx_Oracle openpyxl geopy

RUN	echo -e "\n\n\n### NodeJS & tsc ####\n"
#RUN wget https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-x64.tar.xz; ls -la
ENV NODEJS_VERSION=18.18.0
COPY node-v${NODEJS_VERSION}-linux-x64.tar.xz /tmp
RUN	cd /tmp && tar xvfJ node-v${NODEJS_VERSION}-linux-x64.tar.xz && \
	cp -r /tmp/node-v${NODEJS_VERSION}-linux-x64/bin /usr/ && \
	cp -r /tmp/node-v${NODEJS_VERSION}-linux-x64/lib /usr/ && \
	cp -r /tmp/node-v${NODEJS_VERSION}-linux-x64/include /usr/ && \
	cp -r /tmp/node-v${NODEJS_VERSION}-linux-x64/share /usr/ && \
	npm install -g typescript && \
	npm install -g --save-dev @types/jquery && \
	npm install -g --save sqlite3
	
RUN	echo -e "\n\n\n### SQLcl ####\n"
ENV SQLCI_VERSION=23.2.0.178.1027
COPY sqlcl-${SQLCI_VERSION}.zip /opt/
RUN cd /opt && \
	unzip sqlcl-${SQLCI_VERSION}.zip && \
	rm -v /opt/sqlcl-${SQLCI_VERSION}.zip &&\
	echo "export SQLPATH=~" >> /etc/environment
ENV PATH=$PATH:/opt/sqlcl/bin

#RUN	echo -e "\n\n\n### Oracle instantclient ####\n"
#ENV INSTANTCLIENT_VERSION=21.10.0.0.0
#COPY instantclient-basiclite-linux.x64-${INSTANTCLIENT_VERSION}dbru.zip /opt/
#RUN cd /opt && \
#	unzip /opt/instantclient-basiclite-linux.x64-${INSTANTCLIENT_VERSION}dbru.zip && \
#	rm -v /opt/instantclient-basiclite-linux.x64-${INSTANTCLIENT_VERSION}dbru.zip && \
#	mv -v /opt/instantclient* /opt/instantclient && \
#	apt install -y libaio1
#ENV PATH=$PATH:/opt/instantclient
#ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/instantclient

RUN	echo -e "\n\n\n### Redis ####\n" && \
	apt install -y redis && \
	sed -i 's/^bind/#bind/' /etc/redis/redis.conf && \
	sed -i 's/protected-mode yes/protected-mode no/' /etc/redis/redis.conf && \
	echo "service redis-server start" >> /start.sh
	
RUN	echo -e "\n\n\n### RTL-SDR ####\n" && \
	# apt-get install librtlsdr-dev
	apt install -y libusb-1.0-0-dev && \
	cd /tmp && \
	git clone git://git.osmocom.org/rtl-sdr.git && \
	mkdir rtl-sdr/build && \
	cd rtl-sdr/build && \
	cmake ../ -DINSTALL_UDEV_RULES=ON -DDETACH_KERNEL_DRIVER=ON && \
	make && \
	make install && \
	ldconfig
	
RUN	echo -e "\n\n\n### OpenSky ####\n" && \
	cd /tmp && \
	git clone https://github.com/openskynetwork/opensky-api && \
	cd opensky-api/python && \
	python3 setup.py install

RUN	echo -e "\n\n\n### Net Tools ####\n" && \
	apt update -y && \
	apt install -y \
	arp-scan ipcalc htop nmap masscan netcat net-tools iftop iptables ngrep socat tcpdump telnet traceroute iputils-ping iproute2 ncat
# unable to locate dhclient route websocat wireshark(458 MB)

RUN	echo -e "\n\n\n### Tools/Libraries ####\n" && \
	apt update -y && \
	apt install -y vim rsync tree tmux libicu-dev usbutils tzdata sqlite3 libsqlite3-dev

RUN	echo -e "\n\n\n### RUST ####\n" && curl https://sh.rustup.rs -sSf | bash -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
# echo 'source $HOME/.cargo/env' >> $HOME/.bashrc

RUN	echo -e "\n\n\n### Clean up ####\n" && \
	apt update -y && apt upgrade -y && \
	apt autoclean && apt autoremove && apt clean && \
	rm -rf /tmp/* && \
	apt clean && rm -rf /var/lib/apt/lists/*

# Environment
ADD https://raw.githubusercontent.com/chohan/Linux-script/master/.bashrc /root/.
ADD https://raw.githubusercontent.com/chohan/Linux-script/master/.vimrc /root/.
ADD https://raw.githubusercontent.com/chohan/Linux-script/master/.gitconfig /root/.
ADD https://raw.githubusercontent.com/chohan/Linux-script/master/login.sql /root/.
#ADD https://raw.githubusercontent.com/chohan/Linux-script/master/.tmux.conf /root/.
COPY ubuntu_dev/ubuntu_dev.df	/root/.
COPY ubuntu_dev/ubuntu_dev.yml	/root/.
ENV ACCS_HOME=/d/Projects/ACCS
RUN echo "export ACCS_HOME=$ACCS_HOME" >> /etc/environment && \
	echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ACCS_HOME/sensor:$ACCS_HOME/server" >> /etc/environment && \
	echo "export PATH=$PATH" >> /etc/environment && \
	echo "/bin/bash" >> /start.sh && \
	chmod +x /start.sh

EXPOSE 22
WORKDIR /root
USER root
ENTRYPOINT /start.sh


## commands to build and run
#/bin/systemctl restart ssh.service
# docker build -f ubuntu_dev/ubuntu_dev.df -t ubuntu_dev .
# docker run --rm -d -t -v /C_DRIVE:/c -v /D_DRIVE:/d -v /E_DRIVE:/e -p 2222:22 --expose 9001 -p 9001:9001 --expose 9002 -p 9002:9002 --expose 9003 -p 9003:9003 --privileged -v /dev/bus/usb:/dev/bus/usb --cap-add=SYS_PTRACE --security-opt seccomp=unconfined ubuntu_dev:20190826
# ssh root@192.168.99.102 -p 2222
# docker ps -a
# docker commit <df888c72ed5a> ubuntu_dev
